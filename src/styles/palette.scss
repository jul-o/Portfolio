@use 'sass:color';

$themes: (
	'dark': (
		'primary': #131313,
		'secondary': #007799,

		'dark-grey': #28373b,
		'medium-grey': #96a5a9,
		'light-grey': #e1e5e6,

		'theme': 'dark',
	),
	'light': (
		'primary': #ecececff,
		'secondary': #004154ff,

		'dark-grey': #e1e5e6,
		'medium-grey': #96a5a9,
		'light-grey': #28373b,

		'theme': 'light',
	),
);

@mixin themed() {
	// for each theme defined in $themes
	@each $theme, $map in $themes {
		// define a new matcher
		[data-theme='#{$theme}'] & {
			// define a global variable containing a hash of all current values of the theme
			$theme-map: () !global;
			@each $key, $submap in $map {
				$value: map-get(map-get($themes, $theme), '#{$key}');
				$theme-map: map-merge(
					$theme-map,
					(
						$key: $value,
					)
				) !global;
			}
			@debug $theme-map;
			// execute mixin's original content
			@content;
			// delete $theme-map;
			$theme-map: null !global;
		}
	}
}

// New function t that will read the value of the key in the temporary hash defined by the mixin
@function t($key) {
	@return map-get($theme-map, $key);
}
